package com.hanssarang.backend.member.controller;

import com.hanssarang.backend.member.controller.dto.*;
import com.hanssarang.backend.member.service.MemberService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RequiredArgsConstructor
@RestController
@RequestMapping("/api/v1/members")
public class MemberController {

    private final MemberService memberService;

    @GetMapping("/email")
    public ResponseEntity<Void> checkEmail(@RequestParam String memberEmail) {
        memberService.checkEmail(memberEmail);
        return ResponseEntity.ok().build();
    }

    @GetMapping("/nickname")
    public ResponseEntity<Void> checkNickname(@RequestParam String nickname) {
        memberService.checkNickname(nickname);
        return ResponseEntity.ok().build();
    }

    @PostMapping
    public ResponseEntity<Void> signUp(@RequestHeader("Authorization") String token, @RequestBody SignUpRequest signUpRequest) {
        memberService.signUp(signUpRequest);
        return ResponseEntity.ok().build();
    }

    @PostMapping("/survey")
    public ResponseEntity<Void> createInitialSurvey(@RequestHeader("Authorization") String token, @RequestBody SurveyRequest surveyRequest) {
        memberService.createInitialSurvey(surveyRequest);
        return ResponseEntity.ok().build();
    }

    @PostMapping("/get/email")
    public ResponseEntity<EmailResponse> getMemberEmail(@RequestBody FindingIdRequest findingIdRequest) {
        return ResponseEntity.ok().body(memberService.getMemberEmail(findingIdRequest));
    }

    @GetMapping
    public ResponseEntity<MemberResponse> getMember(@RequestHeader("Authorization") String token) {
        return ResponseEntity.ok(memberService.getMember());
    }

    @PatchMapping("/{memberId}")
    public ResponseEntity<Void> updateMember(@RequestHeader("Authorization") String token, @PathVariable int memberId, @RequestBody MemberRequest memberRequest) {
        memberService.updateMember(memberId, memberRequest);
        return ResponseEntity.ok().build();
    }

    @PatchMapping("/password/{memberId}")
    public ResponseEntity<Void> updatePassword(@PathVariable int memberId, @RequestBody UpdatePasswordRequest memberUpdatePasswordRequest) {
        memberService.updatePassword(memberId, memberUpdatePasswordRequest);
        return ResponseEntity.ok().build();
    }

    @PatchMapping("/mypage/password/{memberId}")
    public ResponseEntity<Void> updatePasswordInMyPage(@PathVariable int memberId, @RequestBody PasswordRequest passwordRequest) {
        memberService.updatePasswordInMyPage(memberId, passwordRequest);
        return ResponseEntity.ok().build();
    }

    @DeleteMapping
    public ResponseEntity<Void> deleteMember() {
        memberService.deleteMember();
        return ResponseEntity.ok().build();
    }

    @PostMapping("/login")
    public ResponseEntity<Void> login(@RequestBody LoginRequest loginRequest) {
        memberService.login(loginRequest);
        return ResponseEntity.ok().header("Authorization", "Bearer {ACCESS TOKEN generated by JWT}").build();
    }
}
