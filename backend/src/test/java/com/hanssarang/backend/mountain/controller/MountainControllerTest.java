package com.hanssarang.backend.mountain.controller;

import com.hanssarang.backend.ApiDocument;
import com.hanssarang.backend.common.domain.Message;
import com.hanssarang.backend.common.exception.NotFoundException;
import com.hanssarang.backend.mountain.controller.dto.MountainResponse;
import com.hanssarang.backend.mountain.service.MountainService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.transaction.UnexpectedRollbackException;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static com.hanssarang.backend.common.domain.ErrorMessage.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.BDDMockito.willReturn;
import static org.mockito.BDDMockito.willThrow;
import static org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(MountainController.class)
class MountainControllerTest extends ApiDocument {

    private static final String AUTHORIZATION = "Authorization";
    private static final String BEARER = "Bearer ";
    private static final String ACCESS_TOKEN = "{ACCESS TOKEN generated by JWT}";
    private static final int ID = 1;
    private static final String NAME = "북한산";
    private static final int HEIGHT = 836;
    private static final String ADDRESS = "서울특별시 강북구ㆍ성북구ㆍ종로구ㆍ은평구, 경기도 고양시ㆍ양주시";
    private static final String IMAGE_URL = "{imge url}";

    private List<MountainResponse> mountainResponses;
    private MountainResponse mountainResponse;

    @MockBean
    private MountainService mountainService;

    @BeforeEach
    void setUp() {
        mountainResponse = MountainResponse.builder()
                .mountainId(ID)
                .name(NAME)
                .height(HEIGHT)
                .address(ADDRESS)
                .imageUrl(IMAGE_URL)
                .build();
        mountainResponses = IntStream.range(0, 3)
                .mapToObj(n -> mountainResponse)
                .collect(Collectors.toList());
    }

    @DisplayName("산 목록 조회 - 성공")
    @Test
    void getMountainsSuccess() throws Exception {
        // given
        willReturn(mountainResponses).given(mountainService).getMountains();
        // when
        ResultActions resultActions = 산목록_조회_요청();
        // then
        산목록_조회_성공(resultActions, mountainResponses);
    }

    @DisplayName("산 목록 조회 - 실패")
    @Test
    void getMountainsFail() throws Exception {
        // given
        willThrow(new UnexpectedRollbackException(FAIL_TO_GET_MOUNTAINS)).given(mountainService).getMountains();
        // when
        ResultActions resultActions = 산목록_조회_요청();
        // then
        산목록_조회_실패(resultActions, new Message(FAIL_TO_GET_MOUNTAINS));
    }

    @DisplayName("산 검색 - 성공")
    @Test
    void searchMountainSuccess() throws Exception {
        // given
        willReturn(mountainResponse).given(mountainService).searchMountain(anyString());
        // when
        ResultActions resultActions = 산검색_요청(NAME);
        // then
        산검색_성공(resultActions, mountainResponse);
    }

    @DisplayName("산 검색 - 실패")
    @Test
    void searchMountainFail() throws Exception {
        // given
        willThrow(new NotFoundException(NOT_FOUND_MOUNTAIN)).given(mountainService).searchMountain(anyString());
        // when
        ResultActions resultActions = 산검색_요청(NAME);
        // then
        산검색_실패(resultActions, new Message(NOT_FOUND_MOUNTAIN));
    }

    private ResultActions 산목록_조회_요청() throws Exception {
        return mockMvc.perform(get("/api/v1/mountains")
                .header(AUTHORIZATION, BEARER + ACCESS_TOKEN));
    }

    private void 산목록_조회_성공(ResultActions resultActions, List<MountainResponse> mountains) throws Exception {
        resultActions.andExpect(status().isOk())
                .andExpect(content().json(toJson(mountains)))
                .andDo(print())
                .andDo(toDocument("get-mountains-success"));
    }

    private void 산목록_조회_실패(ResultActions resultActions, Message message) throws Exception {
        resultActions.andExpect(status().isInternalServerError())
                .andExpect(content().json(toJson(message)))
                .andDo(print())
                .andDo(toDocument("get-mountains-fail"));
    }

    private ResultActions 산검색_요청(String name) throws Exception {
        return mockMvc.perform(get("/api/v1/mountains/2?name=" + name)
                .header(AUTHORIZATION, BEARER + ACCESS_TOKEN));
    }

    private void 산검색_성공(ResultActions resultActions, MountainResponse mountainResponse) throws Exception {
        resultActions.andExpect(status().isOk())
                .andExpect(content().json(toJson(mountainResponse)))
                .andDo(print())
                .andDo(toDocument("search-mountain-success"));
    }

    private void 산검색_실패(ResultActions resultActions, Message message) throws Exception {
        resultActions.andExpect(status().isNotFound())
                .andExpect(content().json(toJson(message)))
                .andDo(print())
                .andDo(toDocument("search-mountain-fail"));
    }
}
