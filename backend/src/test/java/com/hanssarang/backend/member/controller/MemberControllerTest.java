package com.hanssarang.backend.member.controller;


import com.hanssarang.backend.ApiDocument;
import com.hanssarang.backend.common.domain.Message;
import com.hanssarang.backend.common.exception.NotfoundException;
import com.hanssarang.backend.member.controller.dto.MemberEmailResponse;
import com.hanssarang.backend.member.controller.dto.MemberSignUpRequest;
import com.hanssarang.backend.member.controller.dto.MemberSurveyRequest;
import com.hanssarang.backend.member.service.MemberService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.ResultActions;

import java.rmi.UnexpectedException;

import static com.hanssarang.backend.common.domain.ErrorMessage.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.BDDMockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(MemberController.class)
public class MemberControllerTest extends ApiDocument {

    private static final String AUTHORIZATION = "Authorization";
    private static final String BEARER = "Bearer ";
    private static final String ACCESS_TOKEN = "{ACCESS TOKEN generated by JWT}";
    private static final String EMAIL = "ssafy@samsung.com";
    private static final String PASSWORD = "1q2w3e4r";
    private static final String NAME = "이재용";
    private static final String BIRTH = "1968.06.23";
    private static final String PHONENUMBER = "010-3333-3333";
    private static final String ADDRESS = "경기도 수원시 영통구 삼성로 129";
    private static final String NICKNAME = "나는 부회장";

    private MemberEmailResponse memberEmailResponse;
    private MemberSignUpRequest memberSignUpRequest;
    private MemberSurveyRequest memberSurveyRequest;
    @MockBean
    private MemberService memberService;

    @BeforeEach
    void setUp() {
        memberEmailResponse = MemberEmailResponse.builder()
                .email(EMAIL)
                .build();
        memberSignUpRequest = MemberSignUpRequest.builder()
                .email(EMAIL)
                .password(PASSWORD)
                .name(NAME)
                .birth(BIRTH)
                .phoneNumber(PHONENUMBER)
                .address(ADDRESS)
                .nickName(NICKNAME)
                .build();
        memberSurveyRequest = MemberSurveyRequest.builder()
                .myLevel("등린이")
                .visitedMountain("없음")
                .mountainLocation("내 주변")
                .mountainStyle("무리없는 등산")
                .climbingTime("1 ~ 2시간")
                .mountainType("흙산")
                .build();
    }

    @DisplayName("이메일 중복체크 - 성공")
    @Test
    void checkEmailSuccess() throws Exception {
        // given
        willReturn(memberEmailResponse).given(memberService).checkEmail(anyString());
        // when
        ResultActions resultActions = 이메일_중복체크_요청();
        // then
        이메일_중복체크_성공(memberEmailResponse, resultActions);
    }

    @DisplayName("이메일 중복체크 - 중복체크 실패")
    @Test
    void checkEmailFail() throws Exception {
        // given
        willThrow(new NotfoundException(FAIL_TO_CHECK_EMAIL)).given(memberService).checkEmail(anyString());
        // when
        ResultActions resultActions = 이메일_중복체크_요청();
        // then
        이메일_중복체크_실패(new Message(FAIL_TO_CHECK_EMAIL), resultActions);
    }

    @DisplayName("일반 회원가입 - 성공")
    @Test
    void signUpSuccess() throws Exception {
        // given
        willDoNothing().given(memberService).signUpNormal(any(MemberSignUpRequest.class));
        // when
        ResultActions resultActions = 일반_회원가입_요청(memberSignUpRequest);
        // then
        일반_회원가입_성공(resultActions);
    }

    @DisplayName("일반 회원가입 - 실패")
    @Test
    void signUpFail() throws Exception {
        // given
        willThrow(new UnexpectedException(FAIL_TO_SIGNUP)).given(memberService).signUpNormal(any(MemberSignUpRequest.class));
        // when
        ResultActions resultActions = 일반_회원가입_요청(memberSignUpRequest);
        // then
        일반_회원가입_실패(new Message(FAIL_TO_SIGNUP), resultActions);
    }

    @DisplayName("사전 설문조사 - 성공")
    @Test
    void surveySuccess() throws Exception {
        // given
        willDoNothing().given(memberService).preSurvey(any(MemberSurveyRequest.class));
        // when
        ResultActions resultActions = 사전_설문조사_요청(memberSurveyRequest);
        // then
        사전_설문조사_성공(resultActions);
    }

    @DisplayName("사전 설문조사 - 실패")
    @Test
    void surveyFail() throws Exception {
        // given
        willThrow(new UnexpectedException(FAIL_TO_SURVEY)).given(memberService).preSurvey(any(MemberSurveyRequest.class));
        // when
        ResultActions resultActions = 사전_설문조사_요청(memberSurveyRequest);
        // then
        사전_설문조사_실패(new Message(FAIL_TO_SURVEY), resultActions);
    }

    private ResultActions 이메일_중복체크_요청() throws Exception {
        return mockMvc.perform(get("/api/v1/members")
                .header("Authorization", "Bearer {Access Token}"));
    }

    private void 이메일_중복체크_성공(MemberEmailResponse memberEmailResponse, ResultActions resultActions) throws Exception {
        resultActions.andExpect(status().isOk())
                .andExpect(content().json(toJson(memberEmailResponse)))
                .andDo(print())
                .andDo(toDocument("check-email-success"));
    }

    private void 이메일_중복체크_실패(Message message, ResultActions resultActions) throws Exception {
        resultActions.andExpect(status().isNotFound())
                .andExpect(content().json(toJson(message)))
                .andDo(print())
                .andDo(toDocument("check-email-fail"));
    }

    private ResultActions 일반_회원가입_요청(MemberSignUpRequest memberSignUpRequest) throws Exception {
        return mockMvc.perform(post("/api/v1/members/signup")
                .header(AUTHORIZATION, BEARER + ACCESS_TOKEN)
                .contentType(MediaType.APPLICATION_JSON)
                .content(toJson(memberSignUpRequest)));
    }

    private void 일반_회원가입_성공(ResultActions resultActions) throws Exception {
        resultActions.andExpect(status().isOk())
                .andDo(print())
                .andDo(toDocument("create-signup-success"));
    }

    private void 일반_회원가입_실패(Message message, ResultActions resultActions) throws Exception {
        resultActions.andExpect(status().isInternalServerError())
                .andDo(print())
                .andDo(toDocument("create-signup-fail"));
    }

    private ResultActions 사전_설문조사_요청(MemberSurveyRequest memberSurveyRequest) throws Exception {
        return mockMvc.perform(post("/api/v1/members/survey")
                .header(AUTHORIZATION, BEARER + ACCESS_TOKEN)
                .contentType(MediaType.APPLICATION_JSON)
                .content(toJson(memberSurveyRequest)));
    }

    private void 사전_설문조사_성공(ResultActions resultActions) throws Exception {
        resultActions.andExpect(status().isOk())
                .andDo(print())
                .andDo(toDocument("pre-survey-success"));
    }

    private void 사전_설문조사_실패(Message message, ResultActions resultActions) throws Exception {
        resultActions.andExpect(status().isInternalServerError())
                .andDo(print())
                .andDo(toDocument("pre-survey-fail"));
    }


//    @Autowired
//    private WebApplicationContext context;
//
//    @BeforeEach
//    public void setUp(RestDocumentationContextProvider restDocumentation) {
//        this.mockMvc = MockMvcBuilders.webAppContextSetup(context)
//                .apply(documentationConfiguration(restDocumentation))
//                .build();
//    }
}
