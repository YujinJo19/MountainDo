package com.hanssarang.backend.member.controller;


import com.hanssarang.backend.ApiDocument;
import com.hanssarang.backend.common.domain.Message;
import com.hanssarang.backend.common.exception.NotFoundException;
import com.hanssarang.backend.member.controller.dto.*;
import com.hanssarang.backend.member.service.MemberService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.transaction.UnexpectedRollbackException;

import static com.hanssarang.backend.common.domain.ErrorMessage.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.BDDMockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(MemberController.class)
public class SignUpControllerTest extends ApiDocument {

    private static final String AUTHORIZATION = "Authorization";
    private static final String BEARER = "Bearer ";
    private static final String ACCESS_TOKEN = "{ACCESS TOKEN generated by JWT}";
    private static final int ID = 1;
    private static final String EMAIL = "ssafy@samsung.com";
    private static final String PASSWORD = "1q2w3e4r";
    private static final String NAME = "이재용";
    private static final String BIRTH = "1968.06.23";
    private static final String PHONENUMBER = "010-3333-3333";
    private static final String ADDRESS = "경기도 수원시 영통구 삼성로 129";
    private static final String NICKNAME = "나는 부회장";

    private MemberEmailResponse memberEmailResponse;
    private MemberNicknameResponse memberNicknameResponse;
    private MemberSignUpRequest memberSignUpRequest;
    private MemberSurveyRequest memberSurveyRequest;
    private MemberGetIdRequest memberGetIdRequest;
    private MemberUpdatePasswordRequest memberUpdatePasswordRequest;
    private MemberLoginResponse memberLoginResponse;
    private MemberLoginRequest memberLoginRequest;

    @MockBean
    private MemberService memberService;

    @BeforeEach
    void setUp() {
        memberEmailResponse = MemberEmailResponse.builder()
                .email(EMAIL)
                .build();
        memberNicknameResponse = MemberNicknameResponse.builder()
                .nickname(NICKNAME)
                .build();
        memberSignUpRequest = MemberSignUpRequest.builder()
                .email(EMAIL)
                .password(PASSWORD)
                .name(NAME)
                .birth(BIRTH)
                .phoneNumber(PHONENUMBER)
                .address(ADDRESS)
                .nickName(NICKNAME)
                .build();
        memberSurveyRequest = MemberSurveyRequest.builder()
                .myLevel("등린이")
                .visitedMountain("없음")
                .mountainLocation("내 주변")
                .mountainStyle("무리없는 등산")
                .climbingTime("1 ~ 2시간")
                .build();
        memberGetIdRequest = MemberGetIdRequest.builder()
                .name(NAME)
                .birth(BIRTH)
                .phoneNumber(PHONENUMBER)
                .build();
        memberUpdatePasswordRequest = MemberUpdatePasswordRequest.builder()
                .email(EMAIL)
                .name(NAME)
                .build();
        memberLoginResponse = MemberLoginResponse.builder()
                .bearer(BEARER)
                .accessToken(ACCESS_TOKEN)
                .build();
        memberLoginRequest = MemberLoginRequest.builder()
                .email(EMAIL)
                .password(PASSWORD)
                .build();
    }

    @DisplayName("이메일 중복체크 - 성공")
    @Test
    void checkEmailSuccess() throws Exception {
        // given
        willReturn(memberEmailResponse).given(memberService).checkEmail(anyString());
        // when
        ResultActions resultActions = 이메일_중복체크_요청(EMAIL);
        // then
        이메일_중복체크_성공(memberEmailResponse, resultActions);
    }

    @DisplayName("이메일 중복체크 - 중복체크 실패")
    @Test
    void checkEmailFail() throws Exception {
        // given
        willThrow(new NotFoundException(FAIL_TO_CHECK_EMAIL)).given(memberService).checkEmail(anyString());
        // when
        ResultActions resultActions = 이메일_중복체크_요청(EMAIL);
        // then
        이메일_중복체크_실패(new Message(FAIL_TO_CHECK_EMAIL), resultActions);
    }

    @DisplayName("닉네임 중복체크 - 성공")
    @Test
    void checkNicknameSuccess() throws Exception {
        // given
        willReturn(memberNicknameResponse).given(memberService).checkNickname(anyString());
        // when
        ResultActions resultActions = 닉네임_중복체크_요청(NICKNAME);
        // then
        닉네임_중복체크_성공(memberNicknameResponse, resultActions);
    }

    @DisplayName("닉네임 중복체크 - 중복체크 실패")
    @Test
    void checkNicknameFail() throws Exception {
        // given
        willThrow(new NotFoundException(FAIL_TO_CHECK_NICKNAME)).given(memberService).checkNickname(anyString());
        // when
        ResultActions resultActions = 닉네임_중복체크_요청(NICKNAME);
        // then
        닉네임_중복체크_실패(new Message(FAIL_TO_CHECK_NICKNAME), resultActions);
    }

    @DisplayName("일반 회원가입 - 성공")
    @Test
    void signUpSuccess() throws Exception {
        // given
        willDoNothing().given(memberService).signUpNormal(any(MemberSignUpRequest.class));
        // when
        ResultActions resultActions = 일반_회원가입_요청(memberSignUpRequest);
        // then
        일반_회원가입_성공(resultActions);
    }

    @DisplayName("일반 회원가입 - 실패")
    @Test
    void signUpFail() throws Exception {
        // given
        willThrow(new UnexpectedRollbackException(FAIL_TO_SIGNUP)).given(memberService).signUpNormal(any(MemberSignUpRequest.class));
        // when
        ResultActions resultActions = 일반_회원가입_요청(memberSignUpRequest);
        // then
        일반_회원가입_실패(new Message(FAIL_TO_SIGNUP), resultActions);
    }

    @DisplayName("사전 설문조사 - 성공")
    @Test
    void surveySuccess() throws Exception {
        // given
        willDoNothing().given(memberService).createPreSurvey(any(MemberSurveyRequest.class));
        // when
        ResultActions resultActions = 사전_설문조사_요청(memberSurveyRequest);
        // then
        사전_설문조사_성공(resultActions);
    }

    @DisplayName("사전 설문조사 - 실패")
    @Test
    void surveyFail() throws Exception {
        // given
        willThrow(new UnexpectedRollbackException(FAIL_TO_SURVEY)).given(memberService).createPreSurvey(any(MemberSurveyRequest.class));
        // when
        ResultActions resultActions = 사전_설문조사_요청(memberSurveyRequest);
        // then
        사전_설문조사_실패(new Message(FAIL_TO_SURVEY), resultActions);
    }

    @DisplayName("아이디 찾기 - 성공")
    @Test
    void getMemberIdSuccess() throws Exception {
        // given
        willReturn(memberEmailResponse).given(memberService).getMemberEmail(any(MemberGetIdRequest.class));
        // when
        ResultActions resultActions = 아이디_찾기_요청(memberGetIdRequest);
        // then
        아이디_찾기_성공(memberEmailResponse, resultActions);
    }

    @DisplayName("아이디 찾기 - 실패")
    @Test
    void getMemberIdFail() throws Exception {
        // given
        willThrow(new NotFoundException(FAIL_TO_GET_EMAIL)).given(memberService).getMemberEmail(any(MemberGetIdRequest.class));
        // when
        ResultActions resultActions = 아이디_찾기_요청(memberGetIdRequest);
        // then
        아이디_찾기_실패(new Message(FAIL_TO_GET_EMAIL), resultActions);
    }

    @DisplayName("비밀번호 재설정 - 성공")
    @Test
    void updatePasswordSuccess() throws Exception {
        // given
        willDoNothing().given(memberService).updatePassword(anyInt(), any(MemberUpdatePasswordRequest.class));
        // when
        ResultActions resultActions = 비밀번호_재설정_요청(ID, memberUpdatePasswordRequest);
        // then
        비밀번호_재설정_성공(resultActions);
    }

    @DisplayName("비밀번호 재설정 - 실패")
    @Test
    void updatePasswordFail() throws Exception {
        // given
        willThrow(new UnexpectedRollbackException(FAIL_TO_UPDATE_PASSWORD)).given(memberService).updatePassword(anyInt(), any(MemberUpdatePasswordRequest.class));
        // when
        ResultActions resultActions = 비밀번호_재설정_요청(ID, memberUpdatePasswordRequest);
        // then
        비밀번호_재설정_실패(resultActions, new Message(FAIL_TO_UPDATE_PASSWORD));
    }

    @DisplayName("로그인 - 성공")
    @Test
    void loginSuccess() throws Exception {
        // given
        willReturn(memberLoginResponse).given(memberService).getMemberLogin(any(MemberLoginRequest.class));
        // when
        ResultActions resultActions = 로그인_요청(memberLoginRequest);
        // then
        로그인_성공(memberLoginResponse, resultActions);
    }

    private ResultActions 이메일_중복체크_요청(String memberEmail) throws Exception {
        return mockMvc.perform(get("/api/v1/members/email")
                .param("memberEmail", memberEmail));
    }

    private void 이메일_중복체크_성공(MemberEmailResponse memberEmailResponse, ResultActions resultActions) throws Exception {
        resultActions.andExpect(status().isOk())
                .andExpect(content().json(toJson(memberEmailResponse)))
                .andDo(print())
                .andDo(toDocument("check-email-success"));
    }

    private void 이메일_중복체크_실패(Message message, ResultActions resultActions) throws Exception {
        resultActions.andExpect(status().isNotFound())
                .andExpect(content().json(toJson(message)))
                .andDo(print())
                .andDo(toDocument("check-email-fail"));
    }

    private ResultActions 닉네임_중복체크_요청(String nickname) throws Exception {
        return mockMvc.perform(get("/api/v1/members/nickname")
                .param("nickname", nickname));
    }

    private void 닉네임_중복체크_성공(MemberNicknameResponse memberNicknameResponse, ResultActions resultActions) throws Exception {
        resultActions.andExpect(status().isOk())
                .andExpect(content().json(toJson(memberNicknameResponse)))
                .andDo(print())
                .andDo(toDocument("check-nickname-success"));
    }

    private void 닉네임_중복체크_실패(Message message, ResultActions resultActions) throws Exception {
        resultActions.andExpect(status().isNotFound())
                .andExpect(content().json(toJson(message)))
                .andDo(print())
                .andDo(toDocument("check-nickname-fail"));
    }

    private ResultActions 일반_회원가입_요청(MemberSignUpRequest memberSignUpRequest) throws Exception {
        return mockMvc.perform(post("/api/v1/members/signup")
                .header(AUTHORIZATION, BEARER + ACCESS_TOKEN)
                .contentType(MediaType.APPLICATION_JSON)
                .content(toJson(memberSignUpRequest)));
    }

    private void 일반_회원가입_성공(ResultActions resultActions) throws Exception {
        resultActions.andExpect(status().isOk())
                .andDo(print())
                .andDo(toDocument("create-signup-success"));
    }

    private void 일반_회원가입_실패(Message message, ResultActions resultActions) throws Exception {
        resultActions.andExpect(status().isInternalServerError())
                .andExpect(content().json(toJson(message)))
                .andDo(print())
                .andDo(toDocument("create-signup-fail"));
    }

    private ResultActions 사전_설문조사_요청(MemberSurveyRequest memberSurveyRequest) throws Exception {
        return mockMvc.perform(post("/api/v1/members/survey")
                .header(AUTHORIZATION, BEARER + ACCESS_TOKEN)
                .contentType(MediaType.APPLICATION_JSON)
                .content(toJson(memberSurveyRequest)));
    }

    private void 사전_설문조사_성공(ResultActions resultActions) throws Exception {
        resultActions.andExpect(status().isOk())
                .andDo(print())
                .andDo(toDocument("pre-survey-success"));
    }

    private void 사전_설문조사_실패(Message message, ResultActions resultActions) throws Exception {
        resultActions.andExpect(status().isInternalServerError())
                .andExpect(content().json(toJson(message)))
                .andDo(print())
                .andDo(toDocument("pre-survey-fail"));
    }

    private ResultActions 아이디_찾기_요청(MemberGetIdRequest memberGetIdRequest) throws Exception {
        return mockMvc.perform(post("/api/v1/members/getid")
                .contentType(MediaType.APPLICATION_JSON)
                .content(toJson(memberGetIdRequest)));
    }

    private void 아이디_찾기_성공(MemberEmailResponse memberEmailResponse, ResultActions resultActions) throws Exception {
        resultActions.andExpect(status().isOk())
                .andExpect(content().json(toJson(memberEmailResponse)))
                .andDo(print())
                .andDo(toDocument("get-member-id-success"));
    }

    private void 아이디_찾기_실패(Message message, ResultActions resultActions) throws Exception {
        resultActions.andExpect(status().isNotFound())
                .andExpect(content().json(toJson(message)))
                .andDo(print())
                .andDo(toDocument("get-member-id-fail"));
    }

    private ResultActions 비밀번호_재설정_요청(int memberId, MemberUpdatePasswordRequest memberUpdatePasswordRequest) throws Exception {
        return mockMvc.perform(patch("/api/v1/members/update/password/" + memberId)
                .contentType(MediaType.APPLICATION_JSON)
                .content(toJson(memberUpdatePasswordRequest)));
    }

    private void 비밀번호_재설정_성공(ResultActions resultActions) throws Exception {
        resultActions.andExpect(status().isOk())
                .andDo(print())
                .andDo(toDocument("update-password-success"));
    }

    private void 비밀번호_재설정_실패(ResultActions resultActions, Message message) throws Exception {
        resultActions.andExpect(status().isInternalServerError())
                .andExpect(content().json(toJson(message)))
                .andDo(print())
                .andDo(toDocument("update-password-fail"));
    }

    private ResultActions 로그인_요청(MemberLoginRequest memberLoginRequest) throws Exception {
        return mockMvc.perform(get("/api/v1/members/login"));
    }

    private void 로그인_성공(MemberLoginResponse memberLoginResponse, ResultActions resultActions) {
    }
}
