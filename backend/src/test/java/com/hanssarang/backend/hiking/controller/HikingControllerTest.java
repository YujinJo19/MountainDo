package com.hanssarang.backend.hiking.controller;

import com.hanssarang.backend.ApiDocument;
import com.hanssarang.backend.hiking.controller.dto.HikingListResponse;
import com.hanssarang.backend.hiking.service.HikingService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.ResultActions;

import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.BDDMockito.willReturn;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(HikingController.class)
public class HikingControllerTest extends ApiDocument {

    private static final String AUTHORIZATION = "Authorization";
    private static final String BEARER = "Bearer ";
    private static final String ACCESS_TOKEN = "{ACCESS TOKEN generated by JWT}";
    private static final String NAME = "북악산";
    private static final String ADDRESS = "서울시 종로구";
    private static final String LEVEL = "중";

    private HikingListResponse hikingListResponse;

    @MockBean
    private HikingService hikingService;

    @BeforeEach
    void setUp() {
        hikingListResponse = HikingListResponse.builder()
                .name(NAME)
                .address(ADDRESS)
                .level(LEVEL)
                .build();
    }

    @DisplayName("등산 목록 조회 - 성공")
    @Test
    void getHikingsSuccess() throws Exception {
        // given
        willReturn(hikingListResponse).given(hikingService).getHikings(anyInt());
        // when
        ResultActions resultActions = 등산목록_조회_요청();
        // then
        등산목록_조회_성공(resultActions, hikingListResponse);
    }

    private ResultActions 등산목록_조회_요청() throws Exception {
        return mockMvc.perform(get("/api/v1/hikings")
                .header(AUTHORIZATION, BEARER + ACCESS_TOKEN));
    }

    private ResultActions 등산목록_조회_성공(ResultActions resultActions, HikingListResponse hikingListResponse) throws Exception {
        return resultActions.andExpect(status().isOk())
                .andExpect(content().json(toJson(hikingListResponse)))
                .andDo(print())
                .andDo(toDocument("get-hikings-success"));
    }
}
